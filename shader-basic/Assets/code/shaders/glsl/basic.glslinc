#ifndef BASIC_INCLUDED
#define BASIC_INCLUDED

uniform	mat4	_Object2World;
uniform	mat4	_World2Object;
uniform	vec3	_WorldSpaceCameraPos;
uniform	vec4	_WorldSpaceLightPos0;
uniform vec4	_LightColor0;
uniform vec4	_Time;

vec3 GetToLightDirection(vec3 worldPosition)
{
	#ifndef USING_LIGHT_MULTI_COMPILE
		return _WorldSpaceLightPos0.xyz - worldPosition * _WorldSpaceLightPos0.w;
	#else
		#ifndef USING_DIRECTIONAL_LIGHT
		return _WorldSpaceLightPos0.xyz - worldPosition;
		#else
		return _WorldSpaceLightPos0.xyz;
		#endif
	#endif
}

#define CREATE_LIGHTING_VARIABLES(worldPosition, worldNormal) \
	vec3	toLightDirection	= GetToLightDirection(worldPosition.xyz); \
	float	attenuation	= mix(1.0, 1.0 / length(toLightDirection), _WorldSpaceLightPos0.w); \
	vec3	L			= normalize(toLightDirection); \
	vec3	N			= normalize(worldNormal); \
	vec3	V			= normalize(_WorldSpaceCameraPos - worldPosition.xyz); \
	vec3	H			= normalize(V + L);

/////////////this is the end line/////////////////
#endif
